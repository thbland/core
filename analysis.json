{
  "schema_version": "1.0.0",
  "elements": [],
  "classes": [
    {
      "description": "",
      "summary": "",
      "path": "rhi-core-isncsci-binary-observation.html",
      "properties": [
        {
          "name": "none",
          "type": "number",
          "description": "Static property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 17,
              "column": 7
            },
            "end": {
              "line": 17,
              "column": 38
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "0"
        },
        {
          "name": "yes",
          "type": "number",
          "description": "Static property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 7
            },
            "end": {
              "line": 18,
              "column": 37
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1"
        },
        {
          "name": "no",
          "type": "number",
          "description": "Static property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 19,
              "column": 7
            },
            "end": {
              "line": 19,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "2"
        },
        {
          "name": "nt",
          "type": "number",
          "description": "Static property",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 20,
              "column": 7
            },
            "end": {
              "line": 20,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "4"
        }
      ],
      "methods": [],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 20,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "BinaryObservation"
    },
    {
      "description": "The 'rhi-core-isncsci-totals' contains the raw results from running an ISNCSCI Examination through the ISNCSCI Algorithm.",
      "summary": "",
      "path": "rhi-core-isncsci-totals.html",
      "properties": [],
      "methods": [
        {
          "name": "isRightSensoryEmpty",
          "description": "Checks if there the totals currently have no possible right sensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 127,
              "column": 8
            },
            "end": {
              "line": 129,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible right sensory values."
          }
        },
        {
          "name": "addRightSensoryValue",
          "description": "Adds a neurological level to the list of possible right sensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 8
            },
            "end": {
              "line": 141,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be added to the right sensory values."
            }
          ]
        },
        {
          "name": "getRightSensoryValues",
          "description": "Produces a list of possible right sensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible right sensory values."
          }
        },
        {
          "name": "getRightSensoryLongValueString",
          "description": "Produces an ordered list of all possible right sensory values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 155,
              "column": 8
            },
            "end": {
              "line": 157,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible right sensory values."
          }
        },
        {
          "name": "rightSensoryContains",
          "description": "Returns true if the specified levelName belongs to right sensory values list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 8
            },
            "end": {
              "line": 168,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "(required) The name of the ISNCSCI Level name we are searching for."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if a match for levelName is found in the right sensory value list, false otherwise."
          }
        },
        {
          "name": "isLeftSensoryEmpty",
          "description": "Checks if there the totals currently have no possible leftSensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 174,
              "column": 8
            },
            "end": {
              "line": 176,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible left sensory values."
          }
        },
        {
          "name": "addLeftSensoryValue",
          "description": "Adds a neurological level to the list of possible left sensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 8
            },
            "end": {
              "line": 188,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be added to the left sensory values."
            }
          ]
        },
        {
          "name": "getLeftSensoryValues",
          "description": "Produces a list of possible left sensory values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 194,
              "column": 8
            },
            "end": {
              "line": 196,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible left sensory values."
          }
        },
        {
          "name": "getLeftSensoryLongValueString",
          "description": "Produces an ordered list of all possible left sensory values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 8
            },
            "end": {
              "line": 204,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible left sensory values."
          }
        },
        {
          "name": "leftSensoryContains",
          "description": "Returns true if the specified levelName belongs to left sensory values list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 8
            },
            "end": {
              "line": 215,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "(required) The name of the ISNCSCI Level name we are searching for."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if a match for levelName is found in the left sensory value list, false otherwise."
          }
        },
        {
          "name": "isRightMotorEmpty",
          "description": "Checks if there the totals currently have no possible right motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 8
            },
            "end": {
              "line": 223,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible right motor values."
          }
        },
        {
          "name": "addRightMotorValue",
          "description": "Adds a neurological level to the list of possible right motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 8
            },
            "end": {
              "line": 239,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be added to the right motor values."
            }
          ]
        },
        {
          "name": "getRightMotorValues",
          "description": "Produces a list of possible right motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 245,
              "column": 8
            },
            "end": {
              "line": 247,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible right motor values."
          }
        },
        {
          "name": "getRightMotorLongValueString",
          "description": "Produces an ordered list of all possible right motor values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 253,
              "column": 8
            },
            "end": {
              "line": 255,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible right motor values."
          }
        },
        {
          "name": "rightMotorContains",
          "description": "Returns true if the specified levelName belongs to right motor values list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 8
            },
            "end": {
              "line": 266,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "(required) The name of the ISNCSCI Level name we are searching for."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if a match for levelName is found in the right motor value list, false otherwise."
          }
        },
        {
          "name": "isLeftMotorEmpty",
          "description": "Checks if there the totals currently have no possible left motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 272,
              "column": 8
            },
            "end": {
              "line": 274,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible left motor values."
          }
        },
        {
          "name": "addLeftMotorValue",
          "description": "Adds a neurological level to the list of possible left motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 280,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be added to the left motor values."
            }
          ]
        },
        {
          "name": "getLeftMotorValues",
          "description": "Produces a list of possible left motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 8
            },
            "end": {
              "line": 298,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible left motor values."
          }
        },
        {
          "name": "getLeftMotorLongValueString",
          "description": "Produces an ordered list of all possible left motor values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 304,
              "column": 8
            },
            "end": {
              "line": 306,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible left motor values."
          }
        },
        {
          "name": "leftMotorContains",
          "description": "Returns true if the specified levelName belongs to left motor values list.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 313,
              "column": 8
            },
            "end": {
              "line": 317,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "(required) The name of the ISNCSCI Level name we are searching for."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if a match for levelName is found in the left motor value list, false otherwise."
          }
        },
        {
          "name": "addNeurologicalLevelOfInjury",
          "description": "Adds a neurological level to the list of possible neurological level of injury values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 323,
              "column": 8
            },
            "end": {
              "line": 333,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be added to the neurological level of injury values."
            }
          ]
        },
        {
          "name": "getNeurologicalLevelsOfInjury",
          "description": "Produces a list of possible neurological levels of injury.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 339,
              "column": 8
            },
            "end": {
              "line": 341,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible neurological levels of injury."
          }
        },
        {
          "name": "getNeurologicalLevelsOfInjuryLongValueString",
          "description": "Produces an alphabetically ordered list of all possible Neurological Levels of Injury, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 8
            },
            "end": {
              "line": 349,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible Neurological Levels of Injury."
          }
        },
        {
          "name": "isRightSensoryZppEmpty",
          "description": "Checks if there the totals currently have no possible right sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 355,
              "column": 8
            },
            "end": {
              "line": 357,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible right sensory ZPP values."
          }
        },
        {
          "name": "addRightSensoryZppValue",
          "description": "Adds a neurological level to the list of possible right sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 363,
              "column": 8
            },
            "end": {
              "line": 370,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neuroligical level to be added to the possible right sensory ZPP values."
            }
          ]
        },
        {
          "name": "getRightSensoryZppValues",
          "description": "Produces a list of possible right sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 376,
              "column": 8
            },
            "end": {
              "line": 378,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible right sensory ZPP values"
          }
        },
        {
          "name": "getRightSensoryZppLongValueString",
          "description": "Produces an ordered list of all possible right sensory Zone of Partial Preservation values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 8
            },
            "end": {
              "line": 386,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible right sensory Zone of Partial Preservation values."
          }
        },
        {
          "name": "isLeftSensoryZppEmpty",
          "description": "Checks if there the totals currently have no possible left sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 8
            },
            "end": {
              "line": 394,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible left sensory ZPP values."
          }
        },
        {
          "name": "addLeftSensoryZppValue",
          "description": "Adds a neurological level to the list of possible left sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 8
            },
            "end": {
              "line": 407,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neuroligical level to be added to the possible left sensory ZPP values."
            }
          ]
        },
        {
          "name": "getLeftSensoryZppValues",
          "description": "Produces a list of possible left sensory ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 413,
              "column": 8
            },
            "end": {
              "line": 415,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible left sensory ZPP values"
          }
        },
        {
          "name": "getLeftSensoryZppLongValueString",
          "description": "Produces an ordered list of all possible left sensory Zone of Partial Preservation values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 421,
              "column": 8
            },
            "end": {
              "line": 423,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible left sensory Zone of Partial Preservation values."
          }
        },
        {
          "name": "isRightMotorZppEmpty",
          "description": "Checks if there the totals currently have no possible right motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 429,
              "column": 8
            },
            "end": {
              "line": 431,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible right motor ZPP values."
          }
        },
        {
          "name": "addRightMotorZppValue",
          "description": "Adds a neurological level to the list of possible right motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 437,
              "column": 8
            },
            "end": {
              "line": 444,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neuroligical level to be added to the possible right motor ZPP values."
            }
          ]
        },
        {
          "name": "getRightMotorZppValues",
          "description": "Produces a list of possible right motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 450,
              "column": 8
            },
            "end": {
              "line": 452,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible right motor ZPP values"
          }
        },
        {
          "name": "getRightMotorZppLongValueString",
          "description": "Produces an ordered list of all possible right motor Zone of Partial Preservation values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 8
            },
            "end": {
              "line": 460,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible right motor Zone of Partial Preservation values."
          }
        },
        {
          "name": "isLeftMotorZppEmpty",
          "description": "Checks if there the totals currently have no possible left motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 466,
              "column": 8
            },
            "end": {
              "line": 468,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean",
            "desc": "True if there are no recorded possible left motor ZPP values."
          }
        },
        {
          "name": "addLeftMotorZppValue",
          "description": "Adds a neurological level to the list of possible left motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 474,
              "column": 8
            },
            "end": {
              "line": 481,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neuroligical level to be added to the possible left motor ZPP values."
            }
          ]
        },
        {
          "name": "getLeftMotorZppValues",
          "description": "Produces a list of possible left motor ZPP values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 487,
              "column": 8
            },
            "end": {
              "line": 489,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>",
            "desc": "List possible left motor ZPP values"
          }
        },
        {
          "name": "getLeftMotorZppLongValueString",
          "description": "Produces an ordered list of all possible left motor Zone of Partial Preservation values, separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 495,
              "column": 8
            },
            "end": {
              "line": 497,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "Comma separated list of possible left motor Zone of Partial Preservation values."
          }
        },
        {
          "name": "addAsiaImpairmentScaleValue",
          "description": "Adds an AIS value to the list of possible impairment values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 503,
              "column": 8
            },
            "end": {
              "line": 511,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "string",
              "description": "(required) The AIS value to be recorded."
            }
          ]
        },
        {
          "name": "getAsiaImpairmentScaleValues",
          "description": "Produces a string of alphabetically sorted AIS values concatenated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 517,
              "column": 8
            },
            "end": {
              "line": 519,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "List of AIS values, sorted alphabetically, and concatenated by commas. E.g. 'A,C,E'"
          }
        },
        {
          "name": "getLeftLowerMotorTotal",
          "description": "Total from adding all left lower motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 527,
              "column": 8
            },
            "end": {
              "line": 529,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all left lower motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getLeftMotorTotal",
          "description": "Total from adding all left motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 537,
              "column": 8
            },
            "end": {
              "line": 539,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all left motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getLeftPrickTotal",
          "description": "Total from adding all left prick values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 547,
              "column": 8
            },
            "end": {
              "line": 549,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all left prick values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getLeftTouchTotal",
          "description": "Total from adding all left touch values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 8
            },
            "end": {
              "line": 559,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all left touch values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getLeftUpperMotorTotal",
          "description": "Total from adding all left upper motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 567,
              "column": 8
            },
            "end": {
              "line": 569,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all left upper motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getLowerMotorTotal",
          "description": "Total from adding all lower motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 577,
              "column": 8
            },
            "end": {
              "line": 579,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all lower motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getPrickTotal",
          "description": "Total from adding all prick values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 587,
              "column": 8
            },
            "end": {
              "line": 589,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all prick values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getRightLowerMotorTotal",
          "description": "Total from adding all right lower motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 597,
              "column": 8
            },
            "end": {
              "line": 599,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all right lower motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getRightMotorTotal",
          "description": "Total from adding all right motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 607,
              "column": 8
            },
            "end": {
              "line": 609,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all right motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getRightPrickTotal",
          "description": "Total from adding all right prick values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 617,
              "column": 8
            },
            "end": {
              "line": 619,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all right prick values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getRightTouchTotal",
          "description": "Total from adding all right touch values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 627,
              "column": 8
            },
            "end": {
              "line": 629,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all right touch values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getRightUpperMotorTotal",
          "description": "Total from adding all right upper motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 637,
              "column": 8
            },
            "end": {
              "line": 639,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all right upper motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getTouchTotal",
          "description": "Total from adding all touch values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 647,
              "column": 8
            },
            "end": {
              "line": 649,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all touch values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        },
        {
          "name": "getUpperMotorTotal",
          "description": "Total from adding all upper motor values.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 657,
              "column": 8
            },
            "end": {
              "line": 659,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "string",
            "desc": "The total produced by adding all upper motor values.\nAn ! is added if any of the values involved has some type of impairment not due to an SCI.\nUTD is returned if one of the values cannot be used to produce a total. The presence of NT is a typical case."
          }
        }
      ],
      "staticMethods": [
        {
          "name": "containsLevelWithName",
          "description": "Returns true if the specified levelName belongs to a level already contained in the values array provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 8
            },
            "end": {
              "line": 91,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values",
              "type": "Array.<NeuroLevel>",
              "description": "(required) The value array where we are trying to find a match."
            },
            {
              "name": "levelName",
              "type": "string",
              "description": "(required) The name of the ISNCSCI Level name we are searching for."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if a match for levelName is found in the value array, false otherwise."
          }
        },
        {
          "name": "getValuesString",
          "description": "Produces a string containing the values in the provided array, ordered by ordinal, and separated by commas.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 8
            },
            "end": {
              "line": 107,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values",
              "type": "Array.<NeuroLevel>",
              "description": "(required) The value array to be converted to a string."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Comma separated list."
          }
        },
        {
          "name": "getSummaryStringFor",
          "description": "Formats a total value depending on the specified flags.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 8
            },
            "end": {
              "line": 121,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "total",
              "type": "number",
              "description": "Raw total value."
            },
            {
              "name": "hasImpairmentNotDueToSci",
              "type": "boolean",
              "description": "Flag indicating if any value used in the calculation of this total presents impairment not due to a spinal cord injury."
            },
            {
              "name": "containsNt",
              "type": "boolean",
              "description": "Flag indicating if any value used in the calculation of this total is set to Not Testable."
            }
          ],
          "return": {
            "type": "string",
            "desc": "The value, followed by an exclamation mark if the hasImpairmentNotDueToSci is set to true or UTD (Unable to determine) if the containsNt flag is set to true."
          }
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 4
        },
        "end": {
          "line": 660,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "IsncsciTotals"
    },
    {
      "description": "'rhi-core-isncsci-exam' contains the raw values from a ISNCSCI Examination.\nInstances of this class can be passed to the Algorithm methods to obtain totals.",
      "summary": "",
      "path": "rhi-core-isncsci-algorithm.html",
      "properties": [],
      "methods": [],
      "staticMethods": [
        {
          "name": "updateTotalsWithLevelAt",
          "description": "Recursive method which iterates through the values in a nuerology form while it updates the totals generating the results produced by the algorithm.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 8
            },
            "end": {
              "line": 263,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isncsciExam",
              "type": "IsncsciExam",
              "description": "An ISNCSCI exam with all the values required to perform the calculations."
            },
            {
              "name": "totals",
              "type": "IsncsciTotals",
              "description": "A totals object where the results of the calculations will be recorded."
            },
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "The current neurological level to be evaluated."
            },
            {
              "name": "nextNonKeyMuscleShouldBeRightMotor",
              "type": "boolean",
              "description": "Flag used to evaluate the Kathy Collins condition on the right motor results."
            },
            {
              "name": "nextNonKeyMuscleShouldBeLeftMotor",
              "type": "boolean",
              "description": "Flag used to evaluate the Kathy Collins condition on the left motor results."
            }
          ]
        },
        {
          "name": "couldNotHaveMotorFunctionMoreThan3LevelsBelowMotorLevel",
          "description": "Evaluates the specified form and totals to determine if any of the different\nreturn conditions could produce a case where there could be motor function more\nthan 3 levels below the injury level.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 273,
              "column": 8
            },
            "end": {
              "line": 290,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isncsciExam",
              "type": "IsncsciExam",
              "description": "that was used to produce the totals."
            },
            {
              "name": "totals",
              "type": "IsncsciTotals",
              "description": "Totals retunred by the algorithm."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Flag indicating if any combination in the totals could have a case with motor function more than 3 levels below the injury level."
          }
        },
        {
          "name": "couldBeAsiaCorD",
          "description": "Evaluates the specified form and totals to determine if any of the different\nreturn conditions could produce a case where the Asia Impairment Scale is C o D.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 301,
              "column": 8
            },
            "end": {
              "line": 391,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isncsciExam",
              "type": "IsncsciExam",
              "description": "that was used to produce the totals."
            },
            {
              "name": "totals",
              "type": "IsncsciTotals",
              "description": "Totals retunred by the algorithm."
            }
          ]
        },
        {
          "name": "getTotalsFor",
          "description": "Returns the results produced by the ISNCSCI Algorithm in a raw values format.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 8
            },
            "end": {
              "line": 455,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "isncsciExam",
              "type": "IsncsciExam",
              "description": "Neurology form that has been populated with the values to be used in the algorithm calculations."
            }
          ],
          "return": {
            "type": "IsncsciTotals",
            "desc": "Totals in raw values format.\nThe results contain lists with every prossible value for each field.\nYou can use the resulting object to obtained a summarized version, which uses ranges, by passing the result to the method GetTotalsSummaryFor"
          }
        }
      ],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 4
        },
        "end": {
          "line": 456,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "Algorithm"
    },
    {
      "description": "The 'rhi-core-isncsci-level' contains all the values for a specific neurological level required in the calculation of an ISNCSCI exam.",
      "summary": "",
      "path": "rhi-core-isncsci-neuro-level.html",
      "properties": [],
      "methods": [
        {
          "name": "setValues",
          "description": "Updates all dermatome related values on the neurological level.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ordinal",
              "type": "number",
              "description": "The position of the level on the human spine."
            },
            {
              "name": "isKeyMuscle",
              "type": "boolean"
            },
            {
              "name": "isLowerMuscle"
            },
            {
              "name": "rightTouch",
              "type": "string"
            },
            {
              "name": "rightTouchValue",
              "type": "number"
            },
            {
              "name": "rightTouchImpairmentNotDueToSci",
              "type": "boolean"
            },
            {
              "name": "leftTouch",
              "type": "string"
            },
            {
              "name": "leftTouchValue",
              "type": "number"
            },
            {
              "name": "leftTouchImpairmentNotDueToSci",
              "type": "boolean"
            },
            {
              "name": "rightPrick",
              "type": "string"
            },
            {
              "name": "rightPrickValue",
              "type": "number"
            },
            {
              "name": "rightPrickImpairmentNotDueToSci",
              "type": "boolean"
            },
            {
              "name": "leftPrick",
              "type": "string"
            },
            {
              "name": "leftPrickValue",
              "type": "number"
            },
            {
              "name": "leftPrickImpairmentNotDueToSci",
              "type": "boolean"
            },
            {
              "name": "rightMotor",
              "type": "string"
            },
            {
              "name": "rightMotorValue",
              "type": "number"
            },
            {
              "name": "rightMotorImpairmentNotDueToSci",
              "type": "boolean"
            },
            {
              "name": "leftMotor",
              "type": "string"
            },
            {
              "name": "leftMotorValue",
              "type": "number"
            },
            {
              "name": "leftMotorImpairmentNotDueToSci",
              "type": "boolean"
            }
          ],
          "return": {
            "type": "NeuroLevel",
            "desc": "Returns itself to allow chaining methods."
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 4
        },
        "end": {
          "line": 89,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "NeuroLevel"
    },
    {
      "description": "'rhi-core-isncsci-exam' contains the raw values from a ISNCSCI Examination.\nInstances of this class can be passed to the Algorithm methods to obtain totals.",
      "summary": "",
      "path": "rhi-core-isncsci-exam.html",
      "properties": [],
      "methods": [
        {
          "name": "getLevelWithName",
          "description": "Use this method to find neurological level in the exam based on a level name.  E.g. C2,C3,C4...S1,S2,S3,S4_5",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 8
            },
            "end": {
              "line": 149,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "The level name being searched."
            }
          ],
          "return": {
            "type": "NeuroLevel",
            "desc": "The neurology level that matches the specified level name."
          }
        },
        {
          "name": "getLevelAt",
          "description": "Use this method to find neurological level in the exam based on its ordinal position.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 8
            },
            "end": {
              "line": 162,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "ordinal",
              "type": "number",
              "description": "The ordinal position at which we are trying to find a neurological level.\nThe valid values are those between 1 and 28."
            }
          ],
          "return": {
            "type": "NeuroLevel",
            "desc": "The neurology level that matches the specified ordinal position."
          }
        },
        {
          "name": "setRightLowestNonKeyMuscleWithMotorFunction",
          "description": "Specify a neurology level, on the right side of the patient's body.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 8
            },
            "end": {
              "line": 177,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "The name of the right non-key neurological level with motor function."
            }
          ]
        },
        {
          "name": "setLeftLowestNonKeyMuscleWithMotorFunction",
          "description": "Specify a neurology level, on the left side of the patient's body.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 183,
              "column": 8
            },
            "end": {
              "line": 192,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "The name of the left non-key neurological level with motor function."
            }
          ]
        },
        {
          "name": "updateLevelByName",
          "description": "Updates the values of the neurology level with the specified name.\nYou can pass strings containing values between 0-2 for touch and prick and 0-5 for motor.\nYou can also use the exclamation mark and asterisk at the end of the string to indicate impairment not due to a spinal cord injury.\nFinally, you can also pass NT to indicate that a value was not testable.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 208,
              "column": 8
            },
            "end": {
              "line": 219,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "levelName",
              "type": "string",
              "description": "Name of the respective neurology level."
            },
            {
              "name": "rightTouch",
              "type": "string",
              "description": "Right touch"
            },
            {
              "name": "leftTouch",
              "type": "string",
              "description": "Left touch"
            },
            {
              "name": "rightPrick",
              "type": "string",
              "description": "Right Prick"
            },
            {
              "name": "leftPrick",
              "type": "string",
              "description": "Left prick"
            },
            {
              "name": "rightMotor",
              "type": "string",
              "description": "Right motor"
            },
            {
              "name": "leftMotor",
              "type": "string",
              "description": "Left motor"
            }
          ],
          "return": {
            "type": "IsncsciExam",
            "desc": "This exam to allow chaining more requests."
          }
        }
      ],
      "staticMethods": [
        {
          "name": "getIsncsciExamLevels",
          "description": "Creates an array with all the neurological levels required in a ISNCSCI form",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 8
            },
            "end": {
              "line": 64,
              "column": 9
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array.<NeuroLevel>"
          }
        },
        {
          "name": "getDermatomeValue",
          "description": "Provides the numeric value appropriate for an entry.\nIt takes into consideration specific elements like asteriks, exclamation signs, or the use of NT.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 8
            },
            "end": {
              "line": 78,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "(required) The text with the raw entry."
            },
            {
              "name": "normalValue",
              "type": "number",
              "description": "(required) The numeric value considered 'normal' for that type of neurological level."
            }
          ],
          "return": {
            "type": "number",
            "desc": "The numeric value for a neurology level entry."
          }
        },
        {
          "name": "updateLevel",
          "description": "Sets the right names and numeric values for the specified neurology level based on the text based entries provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 8
            },
            "end": {
              "line": 137,
              "column": 9
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "level",
              "type": "NeuroLevel",
              "description": "(required) The neurological level to be updated."
            },
            {
              "name": "rightTouch",
              "type": "string",
              "description": "(required)"
            },
            {
              "name": "leftTouch",
              "type": "string",
              "description": "(required)"
            },
            {
              "name": "rightPrick",
              "type": "string",
              "description": "(required)"
            },
            {
              "name": "leftPrick",
              "type": "string",
              "description": "(required)"
            },
            {
              "name": "rightMotor",
              "type": "string",
              "description": "(required)"
            },
            {
              "name": "leftMotor",
              "type": "string",
              "description": "(required)"
            }
          ]
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 4
        },
        "end": {
          "line": 220,
          "column": 5
        }
      },
      "privacy": "public",
      "name": "IsncsciExam"
    }
  ]
}